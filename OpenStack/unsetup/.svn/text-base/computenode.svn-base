#!/bin/sh
#============
# Definitions
#============
# file directory path
PATH_DIR=$(dirname $(readlink -f $0))
FILE_DIR="${PATH_DIR}/../config/ncompute/compute"
CONF_FILE="/etc/opt/FJSVrorwois/config/ncompute_unsetup.conf"
# source
. ${PATH_DIR}/../script/unsetup_functions
. ${PATH_DIR}/../../msg/UNINSTALLMSG

# Variables
MODE=$1
ROLE="compute"
DB_USER_PASS=""
NODE_HOST=""
ROOT_PASS=""
CONTROLLER_HOST=$(hostname -f)

#--------------
# setting files
#--------------
FILE_CONF=${FILE_DIR}/file.conf
USER_CONF=${FILE_DIR}/user.conf
GROUP_CONF=${FILE_DIR}/group.conf
SERVICE_PORT_CONF=${FILE_DIR}/service_port.conf
RPM_CONF=${FILE_DIR}/rpm.conf

#==========
# Functions
#==========

#-------------------------------
# Set root's password for Node
#-------------------------------
set_root_password()
{
    echo -n "root@${NODE_HOST}'s password: "
    read -s ANSWER_ROOT_PASS
    ROOT_PASS=${ANSWER_ROOT_PASS}
    echo ""
}


#-------------
# check wheather config files exist
#-------------
check_config_file()
{
    write_log "===Start checking config files exist==="
    for file in ${FILE_CONF} ${USER_CONF} ${GROUP_CONF} ${SERVICE_PORT_CONF} ${RPM_CONF}
    do
        if [ ! -f $file ];then
            common_log "${MODE}" "${FILE_NOT_EXIST}${file}"
            failure_operation "${ROLE}" "${NODE_HOST}" 2 "${MODE}"
            exit $?;
        fi
    done
}

#=============
# Main process
#=============
init_log ${ROLE}
write_log "Start Uninstallation of n-Compute Configuration Compute Node"

# Check whether ncompute.conf exists.
if [ ! -e ${CONF_FILE} ];then
    case "${MODE}" in
        "interactive")
            display_and_write_log ${OS_ERROR_READ_CONF}
        ;;
        "silent")
            write_log ${OS_ERROR_READ_CONF}
            result_operation "${ROLE}" "${NODE_HOST}" 2 "${MODE}"
        ;;
    esac
    exit 2
else
    check_user_defined_conf "${CONF_FILE}" "${ROLE}" "${MODE}" "{$NODE_HOST}"
fi

# Show Settings
# Show Uninstallation Settings
[ "${MODE}" = "interactive" ] && { show_variables_agent "${ROLE}"; }

#set sshpass
set_sshpass


ENTIRE_RET=0
#uninstall compute node by loop
for ((count=0 ; count<${#ARRAY_HOSTS[@]} ; count++ ));do
    RET=0
    NODE_RET=0
    # Set file name
    set_file_name
    # Set root's hostname
    NODE_HOST=${ARRAY_HOSTS[$count]}
    # Set root's password
    if [ "${MODE}" = "interactive" ];then
        set_root_password
    else
        ROOT_PASS=${ARRAY_PASSWORD[$count]}
    fi
    
    #echo Check Connection
    check_connection_agent "${NODE_HOST}" "${ROOT_PASS}" "${ROLE}" "${MODE}"
    RET=$?
    [ ${RET} -ne 0 ] && { NODE_RET=1; } && { ENTIRE_RET=$(( $ENTIRE_RET + $NODE_RET )); } && continue
    
    #echo Check Config File
    check_config_file
    RET=$?
     [ ${RET} -ne 0 ] && { NODE_RET=1; } && { ENTIRE_RET=$(( $ENTIRE_RET + $NODE_RET )); } && continue
    # Check whether openstack Compute Node is already installed.
    check_openstack_agent "${NODE_HOST}" "${ROOT_PASS}" "${MODE}" "openstack-nova-compute"
    RET=$?
     [ ${RET} -ne 0 ] && { NODE_RET=1; } && { ENTIRE_RET=$(( $ENTIRE_RET + $NODE_RET )); } && continue
    
    # display uninstall start
    [ "${MODE}" = "interactive" ] && { display_start_uninstall "${ROLE}" "${NODE_HOST}"; }
    
    #Unsetup repository
    unsetup_repository_agent "${NODE_HOST}" "${ROOT_PASS}" "${ROLE}" "${PATH_DIR}"
    RET=$?
    [ ${RET} -ne 0 ] && { NODE_RET=1; }
    
    #Remove RPM
    remove_rpm_agent "${NODE_HOST}" "${ROOT_PASS}" "${MODE}" "${RPM_CONF}" "${UNINSTALL_RPM_FILE}"
    RET=$?
    [ ${RET} -ne 0 ] && { NODE_RET=1; }
    

    #Remove network service port
    #when remove rpm, service has been removed
    unset_network_service_port_agent "${NODE_HOST}" "${ROOT_PASS}" "${MODE}" "${SERVICE_PORT_CONF}"
    RET=$?
    [ ${RET} -ne 0 ] && { NODE_RET=1; }
    
    #Remove user
    unset_user_agent "${NODE_HOST}" "${ROOT_PASS}" "${MODE}" "${USER_CONF}"
    RET=$?
    [ ${RET} -ne 0 ] && { NODE_RET=1; }
    
    #Remove group
    unset_group_agent "${NODE_HOST}" "${ROOT_PASS}" "${MODE}" "${GROUP_CONF}"
    RET=$?
    [ ${RET} -ne 0 ] && { NODE_RET=1; }
    
    #Remove the unnecessary file
    remove_specific_file_agent "${NODE_HOST}" "${ROOT_PASS}" "${MODE}" "${FILE_CONF}"
    RET=$?
    [ ${RET} -ne 0 ] && { NODE_RET=1; }
    
    # manually do this step by user because of its dangerous
    #echo "Unset network service"
    #recover_network_device_file_agent $NODE_HOST $ROOT_PASS $MODE $NETWORK_DEVICE_BACK $NETWORK_DEVICE

    # manually do this step by user because of its dangerous
    #echo "Unset kernel parameter"
    #unset_kernel_setting_agent $NODE_HOST $ROOT_PASS $BACKUP_DIR $SYSCTL_FILE

    if [ ${NODE_RET} -eq 0 ]; then
        success_operation "${ROLE}" "${NODE_HOST}" 0 "${MODE}"
        ENTIRE_RET=$(( $ENTIRE_RET + $NODE_RET ))
    else
        failure_operation "${ROLE}" "${NODE_HOST}" 1 "${MODE}"
        ENTIRE_RET=$(( $ENTIRE_RET + $NODE_RET ))
    fi
done
if [ $ENTIRE_RET -eq 0 ]; then
    exit 0
else
    exit 1
fi

