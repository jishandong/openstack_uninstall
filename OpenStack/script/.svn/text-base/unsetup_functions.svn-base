#!/bin/sh
TIME_STAMP=""
#--------------
# setting files
#--------------
LOG_DIR="/var/opt/FJSVrorwois/log"
LOG_FILE=""
RESULT_FILE="${LOG_DIR}/openstack_unsetup_result.log"
BACKUP_DIR="/var/opt/FJSVrorwois/backup"
SYSCTL_FILE="/etc/sysctl.conf"
NETWORK_DEVICE_BACK="/var/opt/FJSVrorwois/backup/etc/sysconfig/network-scripts/rorwo-ifcfg-eth1"
NETWORK_DEVICE="/etc/sysconfig/network-scripts/ifcfg-eth1"
UNINSTALL_RPM_TIME=$(date +"%Y%m%d%H%M%S")
UNINSTALL_RPM_PATH="/var/opt/FJSVrorwois/backup/rpm_info/"
UNINSTALL_RPM_FILENAME="rpm_not_removed_by_unsetup_"${UNINSTALL_RPM_TIME}".conf"
UNINSTALL_RPM_FILE=${UNINSTALL_RPM_PATH}${UNINSTALL_RPM_FILENAME}
DELETING_RPM_LIST=""
#==================================
# Common Functions
#==================================
create_time_stamp(){
    TIME_STAMP=`date +"%Y-%m-%d %H:%M:%S"`
}

init_log(){
    local ROLE=$1
    LOG_FILE="${LOG_DIR}/openstack_unsetup_${ROLE}.log"
}

write_log(){
    create_time_stamp
    echo ${TIME_STAMP} "$@" >> ${LOG_FILE} 2>&1
}

display_and_write_log(){
    echo "$@"
    write_log "$@"
}

common_log(){
    local MODE=$1
    local MSG=$2
    [ "$MODE" = "interactive" ] && { display_and_write_log ${MSG}; }
    [ "$MODE" = "silent" ] && { write_log ${MSG};  }
}

get_uninstall_mode(){
    OPTION=$1
    if [ "${OPTION}" = "" ];then
        echo "interactive"
    elif [ "${OPTION}" = "-s" ];then
        echo "silent"
    fi
}

check_installed_openstack(){
    if [ -e /etc/opt/FJSVrorwois/info ];then
        return 0
    fi
    return 1
}

display_start_uninstall()
{
    local ROLE=$1
    local HOSTNAME=$2
    
    [ "${ROLE}" = "allinone" ] && echo "${OS_UNINSTALL_ALLINONE_LABEL}${OS_UNINSTALLING_MSG}"
    [ "${ROLE}" = "controller" ] && echo "${OS_UNINSTALL_CONTROLLER_LABEL}${OS_UNINSTALLING_MSG}"
    [ "${ROLE}" = "compute" ] && echo "${OS_UNINSTALL_COMPUTENODE_LABEL}${HOSTNAME}${OS_UNINSTALLING_MSG}"
    [ "${ROLE}" = "network" ] && echo "${OS_UNINSTALL_NETWORKNODE_LABEL}${HOSTNAME}${OS_UNINSTALLING_MSG}"
    
    echo ${OS_UNINSTALL_WATTING_MSG}
}

success_operation()
{
    local ROLE=$1
    local HOSTNAME=$2
    local RESULT=$3
    local MODE=$4
    
    if [ "${MODE}" = "interactive" ];then
        [ "${ROLE}" = "allinone" ] && display_and_write_log "${OS_UNINSTALL_ALLINONE_LABEL}" "${OS_UNINSTALL_SUCCESS_MSG}"
        [ "${ROLE}" = "controller" ] && display_and_write_log "${OS_UNINSTALL_CONTROLLER_LABEL}" "${OS_UNINSTALL_SUCCESS_MSG}"
        [ "${ROLE}" = "compute" ] && display_and_write_log "${OS_UNINSTALL_COMPUTENODE_LABEL}" "${HOSTNAME}" "${OS_UNINSTALL_SUCCESS_MSG}"
        [ "${ROLE}" = "network" ] && display_and_write_log "${OS_UNINSTALL_NETWORKNODE_LABEL}" "${HOSTNAME}" "${OS_UNINSTALL_SUCCESS_MSG}"
    else
        [ "${ROLE}" = "allinone" ] && write_log  "${OS_UNINSTALL_ALLINONE_LABEL}" "${OS_UNINSTALL_SUCCESS_MSG}"
        [ "${ROLE}" = "controller" ] && write_log "${OS_UNINSTALL_CONTROLLER_LABEL}" "${OS_UNINSTALL_SUCCESS_MSG}"
        [ "${ROLE}" = "compute" ] && write_log "${OS_UNINSTALL_COMPUTENODE_LABEL}" "${HOSTNAME}" "${OS_UNINSTALL_SUCCESS_MSG}"
        [ "${ROLE}" = "network" ] && write_log "${OS_UNINSTALL_NETWORKNODE_LABEL}" "${HOSTNAME}" "${OS_UNINSTALL_SUCCESS_MSG}"
        result_operation "${ROLE}" "${HOSTNAME}" "${RESULT}"
    fi
    return ${RESULT}
}

failure_operation()
{
    local ROLE=$1
    local HOSTNAME=$2
    local RESULT=$3
    local MODE=$4
    
    if [ "${MODE}" = "interactive" ];then
        [ "${ROLE}" = "allinone" ] && display_and_write_log "${OS_UNINSTALL_ALLINONE_LABEL}" "${OS_UNINSTALL_FAIlURE_MSG}"
        [ "${ROLE}" = "controller" ] && display_and_write_log "${OS_UNINSTALL_CONTROLLER_LABEL}" "${OS_UNINSTALL_FAIlURE_MSG}"
        [ "${ROLE}" = "compute" ] && display_and_write_log "${OS_UNINSTALL_COMPUTENODE_LABEL}" "${HOSTNAME}" "${OS_UNINSTALL_FAIlURE_MSG}"
        [ "${ROLE}" = "network" ] && display_and_write_log "${OS_UNINSTALL_NETWORKNODE_LABEL}" "${HOSTNAME}" "${OS_UNINSTALL_FAIlURE_MSG}"
    else
        [ "${ROLE}" = "allinone" ] && write_log  "${OS_UNINSTALL_ALLINONE_LABEL}" "${OS_UNINSTALL_FAIlURE_MSG}"
        [ "${ROLE}" = "controller" ] && write_log "${OS_UNINSTALL_CONTROLLER_LABEL}" "${OS_UNINSTALL_FAIlURE_MSG}"
        [ "${ROLE}" = "compute" ] && write_log "${OS_UNINSTALL_COMPUTENODE_LABEL}" "${HOSTNAME}" "${OS_UNINSTALL_FAIlURE_MSG}"
        [ "${ROLE}" = "network" ] && write_log "${OS_UNINSTALL_NETWORKNODE_LABEL}" "${HOSTNAME}" "${OS_UNINSTALL_FAIlURE_MSG}"
        result_operation "${ROLE}" "${HOSTNAME}" "${RESULT}"
    fi
    
    [ "${ROLE}" = "allinone" -o "${ROLE}" = "controller" ] && exit ${RESULT}
    [ "${ROLE}" = "compute" -o "${ROLE}" = "network" ] && return ${RESULT}
}

result_operation()
{
    local ROLE=$1
    local HOSTNAME=$2
    local RESULT_CODE=$3
    
    echo "" >> ${RESULT_FILE}
    echo "Hostname: "${HOSTNAME} >> ${RESULT_FILE}
    echo "Role: "${ROLE} >> ${RESULT_FILE}
    echo "ResultCode: "${RESULT_CODE} >> ${RESULT_FILE}
    return ${RESULT_CODE}
}



#==================================
# allinone and controller Functions
#==================================

#-------------------------------------------
# Unsetup repository for master
#-------------------------------------------
unsetup_repository_master()
{
    write_log " ===Start unsetup repository==="
    local ROLE=$1
    local PATH_DIR=$2
    # Unsetup repository
    sh "${PATH_DIR}/../script/unset_repository.sh" ${ROLE} >> ${LOG_FILE} 2>&1
    if [ $? -ne 0 ]; then
        return 1
    fi
}

#-----------------------------------
# Unsetup user for master
#-----------------------------------
unset_user_master()
{
    write_log "===Start removing user==="
    local OUTPUT=""
    local PID=""
    local LOOP=1
    local NUM=0
    local RET=0
    local USER_CONF=$1
    local MODE=$2
    while read user
    do
        if [ "${user}" != "" ];then
            LOOP=1
            NUM=0
            while [ ${LOOP} -ne 0 ];do
                OUTPUT="`userdel -r ${user} 2>&1`"
                if [ "${OUTPUT}" = "" ]; then
                    LOOP=0
                    write_log "user : ${user} is been deleted"
                elif [[ "${OUTPUT}" =~ "used by process" ]]; then
                    PID=`echo ${OUTPUT} | awk '{printf $NF}'`
                    kill -7 ${PID} > /dev/null 2>&1
                elif [[ "${OUTPUT}" =~ "does not exist" ]]; then
                    LOOP=0
                    write_log "user : ${user} is not exist"
                else
                    if [ ${NUM} -eq 0 ]; then
                        NUM=$(( ${NUM} + 1 ))
                        continue
                    else
                        common_log "$MODE" "${ERROR_DELETE_USER}${user}"
                        LOOP=0
                        RET=1
                    fi
                fi
            done
        fi
    done < ${USER_CONF}
    return ${RET}
}

#---------------------------------------
# Unsetup group for master
#---------------------------------------
unset_group_master()
{
    write_log "===Start removing group==="
    local RET=0
    local RET_VALUE=0
    local GROUP_CONF=$1
    local MODE=$2
    while read group
    do
        if [ "${group}" != "" ];then
            awk -F: '{print $1}' /etc/group | egrep "^${group}$" > /dev/null
            if [ $? -ne 0 ] ;then
                groupdel "${group}" >> ${LOG_FILE} 2>&1
                RET_VALUE=$?
                #6 means the group is not exist.
                if [ ${RET_VALUE} != 6 -a ${RET_VALUE} != 0 ];then
                    common_log "${MODE}" "${ERROR_DELETE_GROUP}${group}"
                    RET=1
                fi
            fi
        fi
    done < ${GROUP_CONF}
    return ${RET}
}

#-------------------------------------
# Unset service for master
#-------------------------------------
unset_service_master()
{
    write_log "===Start unset service==="
    local RET=0
    local OUTPUT=""
    local SERVICE_CONF=$1
    local MODE=$2
    while read service
    do
        if [ "${service}" != "" ];then
            OUTPUT="`chkconfig --del $service 2>&1`"
            if [ "${OUTPUT}" = "" ]; then
                write_log "${service} is been deleted"
            elif [[ "${OUTPUT}" =~ "No such file or directory" ]]; then
                write_log "${service} is not exist"
            else
                common_log "${MODE}" "${ERROR_DELETE_SERVICE}${service}"
                RET=1
            fi
        fi
    done < ${SERVICE_CONF}
    return ${RET}
}

#--------------------------------------------------------
# Recover network service file for master
#--------------------------------------------------------
recover_network_device_file_master()
{
    write_log "Recover network device file"
    local NETWORK_DEVICE_BACK=$1
    local NETWORK_DEVICE=$2
    local MODE=$3
    
    cp -f ${NETWORK_DEVICE_BACK} ${NETWORK_DEVICE} >> ${LOG_FILE} 2>&1
    if [ $? -ne 0 ];then
        common_log "${MODE}" "${ERROR_REVERT_NETWORKSERVICE}"
        return 1
    fi
    rm -f /etc/sysconfig/network-scripts/ifcfg-br-eth* >> ${LOG_FILE} 2>&1
    if [ $? -ne 0 ];then
        common_log "${MODE}" "${ERROR_REVERT_NETWORKSERVICE}"
        return 1
    fi
    
    # Comment for testing
    #       service network restart
    #       [ $? -ne 0 ] && { display_and_write_log $ERROR_RESTART_NETWORKSERVICE; exit 1; }
    
}

#-----------------------------------------------------------------------------------
# Unset kernel setting for master
# accoding to ticket investigate, source may need to change
#-----------------------------------------------------------------------------------
unset_kernel_setting_master()
{
    write_log "Unset kernel parameter"
    local BACKUP_DIR=$1
    local SYSCTL_FILE=$2
    local MODE=$3
    cp -f ${BACKUP_DIR}${SYSCTL_FILE} ${SYSCTL_FILE} >> ${LOG_FILE} 2>&1
    if [ $? -ne 0 ];then
        common_log "${MODE}" "${ERROR_KERNEL_SETTING}"
        return 1
    fi
    return 0
}

#-------------------------------------------
# Unset network port for master
#-------------------------------------------
unset_network_service_port_master()
{
    #echo ----------before-----------
    #tail /etc/services
    write_log "===Start removing network service port==="
    local RET=0
    local SERVICE_PORT_CONF=$1
    local MODE=$2
    while read port
    do
        if [ "${port}" != "" ];then
            SERVICE_NAME=`echo ${port}| awk '{print $1}'`
            SERVICE_PORT=`echo ${port}| awk  '{print $2}'| awk -F "/" '{print $1}'`
            SERVICE_PROTOCOL=`echo $port| awk  '{print $2}'| awk -F "/" '{print $2}'`
            SERVICE_ENDING=`echo ${port}| awk '{print $3}'`
            sed -i "/${SERVICE_NAME}/{/${SERVICE_PORT}/{/${SERVICE_PROTOCOL}/{/${SERVICE_ENDING}/d}}}" /etc/services
            if [ $? -ne 0 ];then
                common_log "${MODE}" "${ERROR_REMOVE_SERVICE_PORT}${port}"
                RET=1
            fi
        fi
    done < ${SERVICE_PORT_CONF}
    return ${RET}
    # Comment  for testing without restart network
    #       service network restart
    #       [ $? -ne 0 ] && { display_and_write_log $ERROR_RESTART_NETWORKSERVICE; exit 1; }
    
    #echo --------after------------
    #tail /etc/services
}
#--------------------------------------------
# remove specific file for master
#--------------------------------------------
remove_specific_file_master()
{
    write_log "===Start removing the unnecessary file==="
    local RET=0
    local FILE_CONF=$1
    local MODE=$2
    #if [ -f /srv/node/swift_loopback/ ]
    mount /srv/node/swift_loopback/ > /dev/null 2>&1
    if [ $? -eq 32 ];then
        umount /srv/node/swift_loopback/ > /dev/null 2>&1
        sleep 5s
    fi
    while read file
    do
        if [ "${file}" != "" ];then
            rm -rf ${file} >> ${LOG_FILE} 2>&1
            if [ $? -ne 0 ];then
                common_log "${MODE}" "${ERROR_DELETE_FILE}${file}"
                RET=1
            fi
        fi
    done < ${FILE_CONF}
    return ${RET}
}
#----------------------------------------------------------------------------
# usage  : match rpm name which is actual installed while removing rpm packge
#
# [root@horizon3 bin]# rpm -e httpd-2.2.15-39.e16.centos.x86_64
# error:Failed dependencies:
#            httpd is need by (installed) mod_ssl-1:2.2.15.e16.centos.x86_64
# [root@horizon3 bin]# rpm -qa|grep mod_ssl
# mod_ssl-2.2.15.e16.centos.x86_64
#----------------------------------------------------------------------------
match_fuzzy_name(){
    local RAW_NAME=$1
    local PREFIX=`echo "${RAW_NAME%%[0-9]:*}"`
    local POSTFIX=`echo "${RAW_NAME##*[0-9]:}"`
    local MATCH_RPM=""
    if [ ${PREFIX} = ${POSTFIX} ];then
        MATCH_RPM=`rpm -qa|egrep ^${PREFIX}$`
    else
        MATCH_RPM=`rpm -qa|egrep ^${PREFIX}*${POSTFIX}$`
    fi
    if [ "${MATCH_RPM}" != "" ];then
        DELETING_RPM_LIST=("${DELETING_RPM_LIST[*]}" ${MATCH_RPM})
    else
        return 1
    fi
}

#------------------------------------------------------------
# usage : Delete RPM confirmation
# return : 0  successfully remove packge
#             1  remove failed
#------------------------------------------------------------
delete_rpm_confirmation_master(){
    local RE_DEPENDENCY_MSG=""
    local PKG=$1
    RE_DEPENDENCY_MSG=`rpm -e ${DELETING_RPM_LIST[*]} 2>&1` #do deleting
    if [[ "${RE_DEPENDENCY_MSG}" =~ "not installed" ]];then
        return 0
    else
        # uninstall pkg fail
        write_log "${ERROR_DELETE_RPM}" "${PKG}" ;
        return 1
    fi
}

#------------------------------------------------------------
# usage  : remove recursion rpm packge
# return : 0  successfully remove packge
#             1  remove failed
#------------------------------------------------------------
recursive_delete_rpm_master(){
    local IS_EXISTS="FALSE"
    local CURRENT_RPM_COUNT=${#DELETING_RPM_LIST[@]}
    local PKG=${DELETING_RPM_LIST[$((${CURRENT_RPM_COUNT}-1))]}
    local RPM_CONF=$1
    
    while read line
    do
        if [ "${PKG}" = "$line" ];then
            IS_EXISTS="TRUE"
            break
        fi
    done < ${RPM_CONF}
    
    if [ "${IS_EXISTS}" = "TRUE" ];then
        DEPENDENCY_MSG=`rpm -e ${DELETING_RPM_LIST[*]} 2>&1` #do deleting
        if [ $? = 0 ];then
            # uninstall pkg success
            return 0
        else
            #get rpm name from last line of dependency error message
            DEPENDENCY_RPM=`echo ${DEPENDENCY_MSG} | grep "is needed by (installed)" | awk '{print $NF}' |head -1`
            if [ "${DEPENDENCY_RPM}" != "" ];then
                # To fix the problem that the name we got and the actual installed RPM is different.
                match_fuzzy_name "${DEPENDENCY_RPM}"
                if [ $? -ne 0 ];then
                    write_log "${ERROR_DELETE_RPM}" "${PKG}" ;
                    return 1
                fi
                # Doing recursion
                recursive_delete_rpm_master "${RPM_CONF}"
                # confirm rpms have been deleted
                delete_rpm_confirmation_master "${PKG}"
                return $?
            else
                return 1
            fi
        fi
    else
        unset DELETING_RPM_LIST[$((${CURRENT_RPM_COUNT}-1))]
        return 1
    fi
}

#------------------------------------
# Remove RPM for master
#------------------------------------
remove_rpm_master()
{
    write_log "===Start removing package==="
    local OUTPUT=""
    local RPM_CONF=$1
    local MODE=$2
    mkdir -pv ${UNINSTALL_RPM_PATH} > /dev/null 2>&1
    while read pkg
    do
        DELETING_RPM_LIST=""
        if [ "${pkg}" != "" ];then
            OUTPUT=`rpm -e ${pkg} 2>&1`
            if [ $? = 0 -o "${OUTPUT}" = "" ];then
                write_log "${SUCCESS_DELETE_RPM}" "${pkg}";
                continue
            elif [[ "${OUTPUT}" =~ "Failed dependencies" ]];then
                # recursion remove
                DELETING_RPM_LIST=(${pkg})
                recursive_delete_rpm_master "${RPM_CONF}"
                RET=$?
                if [ $RET -ne 0 ]; then
                    write_log "${ERROR_DELETE_RPM}" "${pkg}";
                    echo ${pkg} >> ${UNINSTALL_RPM_FILE}
                else
                    write_log "${SUCCESS_DELETE_RPM}" "${pkg}";
                fi
            elif [[ "${OUTPUT}" =~ "not installed" ]];then
                write_log "${RPM_NOT_INSTALLED}" "${pkg}";
            else
                delete_rpm_confirmation_master "${pkg}"
                if [ $? -ne 0 ];then
                    echo ${pkg} >> ${UNINSTALL_RPM_FILE}
                fi
            fi
        fi
    done < ${RPM_CONF}
    if [ -f "${UNINSTALL_RPM_FILE}" ]; then
        common_log "${MODE}" "${IS_UNINSTALL_FAILURE_BECAUSE_RPM}"
        return 1
    fi
}
#----------------------------------------------------
# check openstack installed for master
#----------------------------------------------------
check_openstack_master()
{
    write_log "===Start checking openstack has installed==="
    local MODE=$1
    check_installed_openstack
    if [ $? -eq 1 ];then
        [ "${MODE}" = "interactive" ] && { display_and_write_log ${OS_ERROR_OPENSTACK_NOT_INSTALL}; }
        [ "${MODE}" = "silent" ] && { write_log ${OS_ERROR_OPENSTACK_NOT_INSTALL}; result_operation "${ROLE}" "${HOSTNAME}" 1; }
        exit 1;
    fi
}

user_confirm_master()
{
    while :
    do
        echo ""
        echo "Do you want to continue uninstallation ?[y,n]"
        echo -n "=> "
        read ANS
        case ${ANS} in
            "y")
                break
            ;;
            "n")
                exit 0
            ;;
            *)
                echo "${DSPMSG_INVALID}"
                read
            ;;
        esac
    done
    return 0
}

#==================================
# compute and network Functions
#==================================
#------------------------------------
# Show variables for agent
#------------------------------------
show_variables_agent()
{
    local NUM=0
    local ROLE=$1
    while :
    do
        NUM=0
        echo "=== ${ROLE} Node Host List ==="
        for element in ${ARRAY_HOSTS[@]}; do
            NUM=$(( $NUM + 1 ))
            echo "${NUM}.    Hostname: ${element}"
        done
        echo "==========================================="
        echo "Do you want to continue uninstallation ?[y,n]"
        echo -n "=> "
        read ANS
        case ${ANS} in
            "y")
                break
            ;;
            "n")
                exit 0
            ;;
            *)
                echo "${DSPMSG_INVALID}"
                read
            ;;
        esac
    done
}
#----------------------------------------------------
# Check connection to Node for agent
#----------------------------------------------------
check_connection_agent()
{
    write_log " ===Start checking connection==="
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local ROLE=$3
    local MODE=$4
    sshpass -p ${ROOT_PASS} ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${NODE_HOST} pwd > /dev/null 2>&1
    if [ $? -ne 0 ];then
        common_log "${MODE}" "${OS_ERROR_SSH_CONNECTION}${NODE_HOST}"
        failure_operation "${ROLE}" "${NODE_HOST}" 1 "${MODE}"
        return $?
    fi
    return 0
}
#------------------------------------------
# Unsetup repository for agent
#------------------------------------------
unsetup_repository_agent()
{
    write_log " ===Start unsetup repository ==="
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local ROLE=$3
    local PATH_DIR=$4
    local RET=0
    sh "${PATH_DIR}/../script/unset_repository.sh" "${ROLE}" "${NODE_HOST}" "${ROOT_PASS}" >> ${LOG_FILE} 2>&1
    if [ $? -ne 0 ]; then
        return 1
    fi
    
}
#----------------------------------
# Unsetup user for agent
#----------------------------------
unset_user_agent()
{
    write_log " ===Start removing user ==="
    local LOOP=1
    local OUTPUT=""
    local PID=""
    local NUM=0
    local RET=0
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local MODE=$3
    local USER_CONF=$4
    while read user
    do
        if [ "${user}" != "" ];then
            LOOP=1
            NUM=0
            while [ ${LOOP} -ne 0 ]
            do
                OUTPUT=`sshpass -p ${ROOT_PASS} ssh -T -n -o StrictHostKeyChecking=no root@${NODE_HOST} "userdel -r ${user} 2>&1"`
                if [[ "${OUTPUT}" = "" ]]; then
                    LOOP=0
                    write_log "user : ${user} is been deleted"
                elif [[ "${OUTPUT}" =~ "used by process" ]]; then
                    PID=`echo ${OUTPUT} | awk '{printf $NF}'`
                    sshpass -p ${ROOT_PASS} ssh -T -n -o StrictHostKeyChecking=no root@${NODE_HOST} "kill -7 ${PID} > /dev/null 2>&1"
                elif [[ "${OUTPUT}" =~ "does not exist" ]]; then
                    LOOP=0
                    write_log "user : ${user} is not exist"
                else
                    if [ ${NUM} -eq 0 ];then
                        NUM=$(( $NUM + 1 ))
                        continue
                    else
                        common_log "${MODE}" "${ERROR_DELETE_USER}${user}"
                        LOOP=0
                        RET=1
                    fi
                fi
            done
        fi
    done < ${USER_CONF}
    return ${RET}
}
#------------------------------------
# Unsetup group for agent
#------------------------------------
unset_group_agent()
{
    write_log " ===Start removing group==="
    local RET=0
    local RET_VALUE=0
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local MODE=$3
    local GROUP_CONF=$4
    while read group
    do
        if [ "${group}" != "" ];then
            sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST \
            "groupdel ${group}">> ${LOG_FILE} 2>&1
            RET_VALUE=$?
            #6 means the group is not exist.
            if [ ${RET_VALUE} != 0 -a ${RET_VALUE} != 6 ];then
                common_log "${MODE}" "${ERROR_DELETE_GROUP}${group}"
                RET=1
            fi
        fi
    done < ${GROUP_CONF}
    return ${RET}
}
#--------------------------------------------
# Unset network port for agent
#--------------------------------------------
unset_network_service_port_agent()
{
    write_log " ===Start unset network service port==="
    local RET=0
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local MODE=$3
    local SERVICE_PORT_CONF=$4
    while read port
    do
        if [ "${port}" != "" ];then
            SERVICE_NAME=`echo ${port}| awk '{print $1}'`
            SERVICE_PORT=`echo ${port}| awk  '{print $2}'| awk -F "/" '{print $1}'`
            SERVICE_PROTOCOL=`echo ${port}| awk  '{print $2}'| awk -F "/" '{print $2}'`
            SERVICE_ENDING=`echo ${port}| awk '{print $3}'`
            sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST \
            "sed -i "/${SERVICE_NAME}/{/${SERVICE_PORT}/{/${SERVICE_PROTOCOL}/{/${SERVICE_ENDING}/d}}}" /etc/services > /dev/null 2>&1"
            if [ $? -ne 0 ];then
                common_log "${MODE}" "${ERROR_REMOVE_SERVICE_PORT}${port}"
                RET=1
            fi
        fi
    done < ${SERVICE_PORT_CONF}
    return ${RET}
    # Comment  for testing without restart network
    #   sshpass -p $ROOT_PASS ssh -o StrictHostKeyChecking=no root@$NODE_HOST \
    #       "service network restart"
    #   [ $? -ne 0 ] && { display_and_write_log $ERROR_RESTART_NETWORKSERVICE; exit 1; }
    
}
#--------------------------------------------
# remove specific file for agent
#--------------------------------------------
remove_specific_file_agent()
{
    write_log " ===Start removing the unnecessary file==="
    local RET=0
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local MODE=$3
    local FILE_CONF=$4
    while read file
    do
        if [ "${file}" != "" ];then
            sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST \
            "rm -rf ${file} > /dev/null 2>&1"
            if [ $? -ne 0 ];then
                common_log "${MODE}" "${ERROR_DELETE_FILE}${file}"
                RET=1
            fi
        fi
    done < ${FILE_CONF}
    return ${RET}
}

match_fuzzy_name_agent(){
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local RAW_NAME=$3
    local PREFIX=`echo "${RAW_NAME%%[0-9]:*}"`
    local POSTFIX=`echo "${RAW_NAME##*[0-9]:}"`
    local MATCH_RPM=""
    if [ ${PREFIX} = ${POSTFIX} ];then
        MATCH_RPM=`sshpass -p $ROOT_PASS ssh -T -n -o StrictHostKeyChecking=no root@$NODE_HOST "rpm -qa|egrep ^${PREFIX}$ 2>&1"`
    else
        MATCH_RPM=`sshpass -p $ROOT_PASS ssh -T -n -o StrictHostKeyChecking=no root@$NODE_HOST "rpm -qa|egrep ^${PREFIX}*${POSTFIX}$ 2>&1"`
    fi
    if [ "${MATCH_RPM}" != "" ];then
        DELETING_RPM_LIST=("${DELETING_RPM_LIST[*]}" ${MATCH_RPM})
    else
        return 1
    fi
}

#------------------------------------------------------------
# usage : Delete RPM confirmation
# return : 0  successfully remove packge
#             1  remove failed
#------------------------------------------------------------
delete_rpm_confirmation_agent(){
    local RE_DEPENDENCY_MSG=""
    local PKG=$1
    local NODE_HOST=$2
    local ROOT_PASS=$3
    RE_DEPENDENCY_MSG=`sshpass -p $ROOT_PASS ssh -T -n -o StrictHostKeyChecking=no root@$NODE_HOST "rpm -e ${DELETING_RPM_LIST[*]} 2>&1"`
    if [[ "${RE_DEPENDENCY_MSG}" =~ "not installed" ]];then
        return 0
    else
        # uninstall pkg fail
        write_log ${ERROR_DELETE_RPM} ${PKG} ;
        return 1
    fi
}

#------------------------------------------------------------
# usage  : remove recursion rpm packge
# return : 0  successfully remove packge
#             1  remove failed
#------------------------------------------------------------
recursive_delete_rpm_agent(){
    local IS_EXISTS="FALSE"
    local CURRENT_RPM_COUNT=${#DELETING_RPM_LIST[@]}
    local PKG=${DELETING_RPM_LIST[$((${CURRENT_RPM_COUNT}-1))]}
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local RPM_CONF=$3
    while read line
    do
        if [ "${PKG}" = "$line" ];then
            IS_EXISTS="TRUE"
            break
        fi
    done < ${RPM_CONF}
    
    if [ "$IS_EXISTS" = "TRUE" ];then
        DEPENDENCY_MSG=`sshpass -p $ROOT_PASS ssh -T -n -o StrictHostKeyChecking=no root@$NODE_HOST "rpm -e ${DELETING_RPM_LIST[*]} 2>&1"`  
        if [ $? = 0 ];then
            # uninstall pkg success
            return 0
        else
            #get rpm name from last line of dependency error message
            DEPENDENCY_RPM=`echo ${DEPENDENCY_MSG} | grep "is needed by (installed)" | awk '{print $NF}' |head -1`
            if [ "${DEPENDENCY_RPM}" != "" ];then
                # To fix the problem that the name we got and the actual installed RPM is different.
                match_fuzzy_name_agent "${NODE_HOST}" "${ROOT_PASS}" "${DEPENDENCY_RPM}"
                if [ $? -ne 0 ];then
                    write_log ${ERROR_DELETE_RPM} ${PKG} ;
                    return 1
                fi
                # Doing recursion
                recursive_delete_rpm_agent "${NODE_HOST}" "${ROOT_PASS}" "${RPM_CONF}"
                # confirm rpms have been deleted
                delete_rpm_confirmation_agent "${PKG}" "${NODE_HOST}" "${ROOT_PASS}"
                return $?
            else
                return 1
            fi
        fi
    else
        unset DELETING_RPM_LIST[$((${CURRENT_RPM_COUNT}-1))]
        return 1
    fi
}

#----------------------------------
# Remove RPM for agent
#----------------------------------
remove_rpm_agent()
{
    write_log " ===Start removing package==="
    local OUTPUT=""
    local RET=0
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local MODE=$3
    local RPM_CONF=$4
    local UNINSTALL_RPM_FILE=$5
    sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST "mkdir -pv ${UNINSTALL_RPM_PATH} > /dev/null 2>&1"
    while read pkg
    do
        DELETING_RPM_LIST=""
        if [ "${pkg}" != "" ];then
            OUTPUT=`sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST "rpm -e ${pkg} 2>&1"`
            if [ $? = 0 -o "${OUTPUT}" = ""  ];then
                write_log ${SUCCESS_DELETE_RPM} ${pkg}
                continue
            elif [[ "${OUTPUT}" =~ "Failed dependencies"  ]];then
                #recursion remove
                DELETING_RPM_LIST=(${pkg})
                recursive_delete_rpm_agent "${NODE_HOST}" "${ROOT_PASS}" "${RPM_CONF}"
                RET=$?
                if [ $RET -ne 0 ];then
                    write_log $ERROR_DELETE_RPM ${pkg}
                    sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST "echo ${pkg} >> ${UNINSTALL_RPM_FILE}"
                else
                    write_log ${SUCCESS_DELETE_RPM} ${pkg}
                fi
            elif [[ "${OUTPUT}" =~ "not installed"  ]];then
                write_log $RPM_NOT_INSTALLED ${pkg}
            else
                delete_rpm_confirmation_agent "${pkg}" "${NODE_HOST}" "${ROOT_PASS}"
                if [ $? -ne 0 ];then
                    sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST "echo ${pkg} >> ${UNINSTALL_RPM_FILE}"
                fi
            fi
        fi
    done < ${RPM_CONF}
    sshpass -p ${ROOT_PASS} ssh -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${NODE_HOST} "ls ${UNINSTALL_RPM_FILE} > /dev/null 2>&1"
    if [ $? -eq 0 ]; then
        common_log "${MODE}" "${IS_UNINSTALL_FAILURE_BECAUSE_RPM}"
        return 1
    fi
    return 0
}

#------------------------
# Unsetup network service
#------------------------
recover_network_device_file_agent()
{
    write_log " ===Start recover network device file==="
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local MODE=$3
    local NETWORK_DEVICE_BACK=$4
    local NETWORK_DEVICE=$5
    sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST \
    "cp -f $NETWORK_DEVICE_BACK $NETWORK_DEVICE > /dev/null 2>&1"
    if [ $? -ne 0 ];then
        common_log "${MODE}" "${ERROR_REVERT_NETWORKSERVICE}"
        return 1
    fi
    sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST \
    "rm -f /etc/sysconfig/network-scripts/ifcfg-br-eth* > /dev/null 2>&1"
    if [ $? -ne 0 ];then
        common_log "${MODE}" "${ERROR_REVERT_NETWORKSERVICE}"
        return 1
    fi
    
    # Comment for testing
    #  sshpass -p $ROOT_PASS ssh -o StrictHostKeyChecking=no root@$NODE_HOST \
    #      "service network restart"
    #   [ $? -ne 0 ] && { display_and_write_log $ERROR_RESTART_NETWORKSERVICE; exit 1; }
    return 0
}

#---------------------------------------------------------------------------------
# Unset kernel setting for agent
# accoding to ticket investigate, source may need to change
#----------------------------------------------------------------------------------
unset_kernel_setting_agent()
{
    write_log "Unset kernel parameter"
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local BACKUP_DIR=$3
    local SYSCTL_FILE=$4
    sshpass -p $ROOT_PASS ssh -n -o StrictHostKeyChecking=no root@$NODE_HOST \
    "cp -f ${BACKUP_DIR}${SYSCTL_FILE} ${SYSCTL_FILE} > /dev/null 2>&1"
    if [ $? -ne 0 ];then
        common_log "${MODE}" "${ERROR_KERNEL_SETTING}"
        return 1
    fi
    return 0
}

#------------------------------------------------------------------------------
# check whether openstack is already installed for agent
#------------------------------------------------------------------------------
check_openstack_agent()
{
    write_log "===Start checking openstack has installed==="
    local RET=""
    local NODE_HOST=$1
    local ROOT_PASS=$2
    local MODE=$3
    local RPM=$4
    # check whether openstack Compute Node is already installed.
    RET=`sshpass -p ${ROOT_PASS} ssh -o StrictHostKeyChecking=no root@${NODE_HOST} \
    "rpm -qa | grep ${RPM}"`
    if [ "${RET}" != "" ];then
        return 0
    else
        common_log "${MODE}" "${OS_ERROR_OPENSTACK_NOT_INSTALL}"
        failure_operation "$ROLE" "$NODE_HOST" 1 "$MODE"
        return $?
    fi
}

check_user_defined_conf()
{
    local USER_CONF=$1
    . ${USER_CONF} >/dev/null 2>&1
    if [ $? -ne 0 ];then
        echo ${ERROR_SYNTAX}
        exit 1
    fi
    
    local ROLE=$2
    local MODE=$3
    local HOSTNAME=$4
    
    case "${ROLE}" in
        "compute" )
            if [ "${MODE}" != "silent" ];then
                if [ -z "$COMPUTE_NODE_HOST" ];then
                    display_and_write_log ${ERROR_NOT_REQUIRED_VALUE}
                    exit 1
                else
                    check_node_host_and_pass "COMPUTE" "${COMPUTE_NODE_HOST}" "${COMPUTE_NODE_PASSWORD}"
                fi
            else
                if [ -z "$COMPUTE_NODE_HOST" -o -z "$COMPUTE_NODE_PASSWORD" ];then
                    write_log $ERROR_NOT_REQUIRED_VALUE
                    result_operation "${ROLE}" "${COMPUTE_NODE_HOST}" 1
                    exit 1
                else
                    check_node_host_and_pass "COMPUTE" "${COMPUTE_NODE_HOST}" "${COMPUTE_NODE_PASSWORD}"
                fi
            fi
        ;;
        
        "network" )
            if [ "${MODE}" != "silent" ];then
                if [ -z "$NETWORK_NODE_HOST" ];then
                    display_and_write_log $ERROR_NOT_REQUIRED_VALUE
                    exit 1
                else
                    check_node_host_and_pass "NETWORK" "${NETWORK_NODE_HOST}" "${NETWORK_NODE_PASSWORD}"
                fi
            else
                if [ -z "$NETWORK_NODE_HOST" -o -z "$NETWORK_NODE_PASSWORD" ];then
                    write_log $ERROR_NOT_REQUIRED_VALUE
                    result_operation "${ROLE}" "${NETWORK_NODE_HOST}" 1
                    exit 1
                else
                    check_node_host_and_pass "NETWORK" "${NETWORK_NODE_HOST}" "${NETWORK_NODE_PASSWORD}"
                fi
            fi
        ;;
    esac
}

# Check Node OS info
check_node_host_and_pass()
{
  TYPE=$1 #COMPUTE,NETWORK
  NODE_HOSTS=$2
  NODE_PASSWORDS=$3

  #check compute or network hosts
  ARRAY_HOSTS=(`echo $NODE_HOSTS | tr -s ',' ' '`)
  NUM_NODE=`echo ${#ARRAY_HOSTS[*]}`
  for node in ${ARRAY_HOSTS[*]}
  do
    echo $node | egrep "^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" >/dev/nul 2>&1
      if [ $? -eq 0 ];then
      [ "${MODE}" = "interactive" ] && { display_and_write_log $ERROR_INVALID_VALUE"${TYPE}_NODE_HOST"; }
      [ "${MODE}" = "silent" ] && { write_log $ERROR_INVALID_VALUE"${TYPE}_NODE_HOST"; result_operation "${ROLE}" "${NODE_HOSTS}" 1; }
      exit 1
    fi
  done  

  #check compute or network pasword
  [ "${MODE}" = "silent" ] && { 
    ARRAY_PASSWORD=(`echo $NODE_PASSWORDS | sed 's;\([^\\]\),;\1 ;g'`)
    NUM_PASS=`echo ${#ARRAY_PASSWORD[*]}`
    if [ "$NUM_NODE" -ne "$NUM_PASS" ];then
      write_log ${ERROR_INVALID_VALUE}"${TYPE}_NODE_PASSWORD"
      result_operation "${ROLE}" "${NODE_HOSTS}" 1
      exit 1
    fi
  } 
}

set_sshpass(){
    sshpass > /dev/null 2>&1
    if [ $? -ne 0 ];then
        yum install -y sshpass > /dev/null 2>&1
        if [ $? -ne 0 ];then
            common_log "${MODE}" "${ERROR_INSTALL_REMOTE_TOOL}"
            exit 1
        fi
    fi
}

#-------------------
# Set file name
#-------------------
set_file_name()
{
    UNINSTALL_RPM_TIME=$(date +"%Y%m%d%H%M%S")
    UNINSTALL_RPM_PATH="/var/opt/FJSVrorwois/backup/rpm_info/"
    UNINSTALL_RPM_FILENAME="rpm_not_removed_by_unsetup_"${UNINSTALL_RPM_TIME}".conf"
    UNINSTALL_RPM_FILE=${UNINSTALL_RPM_PATH}${UNINSTALL_RPM_FILENAME}
}